Code review

#1
- в данной реализации как-то используется version? - +++
- `dos.flush()` для чего добавил? у нас же try-with-resources - +++
- читать / писать лучше через switch (со сквозными case) в зависимости от SectionType - +++
- writeStringListSection/writeCompanySection декларативный forEach не подходит,
т.к. IOException надо прокидывать, а не обрабатывать - +++
- см. коммиты,  HyperLink.Link  и CompanyPersonalInfo.description могут быть нул
- стр.127 переменная не используется - +++
- readStringListSection, ListSection - это типизированный класс,
соотв при создании надо тип указывать - +++
- стр.163 не забывай <> - +++
- стр167 и 169 - неудачное  решение, сохраняй отд месяц и год - +++ решил по-другому

- попробуй зарефакторить запись /чтение коллекций через функциональный интерфейс
посмотри на реализацию forEach
default void forEach(Consumer<? super T> action) {
    Objects.requireNonNull(action);
    for (T t : this) {
        action.accept(t);
    }
}
ни сам метод ни Consumer исключения не прокидывают, а нам надо такое же ~но с перламутровыми пуговицами~
но с прокидыванием исключения

#2
привет
- любые коммиты из урока, см. классы Link / Position, на некоторые поля стоит ограничение нотнул, на некоторые нет. Соответственно в решении должно быть учтено, что некоторые данные могут быть нул
- начни с doWrite
если мы просто заменим запись циклов на декларативный forEach  c Consumer - то будет ругаться на исключение, которое не может быть прокинуто... соотв нам надо написать свой вариант
в конечном варианте должно получится что-то вроде такого (например запись контактов)
Map<ContactType, String> contacts = r.getContacts();
           writeCollection(dos, contacts.entrySet(), entry -> {
               dos.writeUTF(entry.getKey().name());
               dos.writeUTF(entry.getValue());
});
т.е. мы указываем
- `dos`, куда писать,
- `contacts.entrySet()` что писать- коллекция
- `entry -> {...}` и как писать каждый элемент по отдельности - функциональный интерфейс

writeCollection - метод, который прокидывает исключение
функциональный интерфейс - прокидывает исключение

см. на степике курс по функциональному интерфейсу
https://stepik.org/course/1595/syllabus (edited)

#3
привет
- читать / писать лучше через switch (со сквозными case) *в зависимости от SectionType*.
Не класс, а SectionType +++

*doWrite*
- стр.26-27 - это тоже запись коллекции +++
- writeTextSection нет смысла выносить в отд метод +++
- стр.37, ListSection - типизированный класс, поэтому кастить с типом надо
`writeCollection(dos, (( ListSection<String> ) entry.getValue()).getItems(), dos::writeUTF);`+++
- стр.46 переменная не используется +++

*doRead*
- readList, перенеси сюда чтение размера коллекции. Используй типизированный ItemReader +++
- readStringListSection, сразу делай return new ListSection... +++ убрал метод
- readCompanySection, стр124-126 это тоже чтение списка +++

удали все лишнее CompanyPersonalInfoReaderWriter, StringReaderWriter, ItemReaderWriter +++

потом еще поправим (edited)